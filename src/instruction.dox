/**
 * @mainpage Brick Games v2.0. Документация:
 *
 * @section hello_sec О проекте
 *
 * В этом проекте реализована игра Змейка и Тетрис, логика которых основана на работе конечного автомата FSM (final state machine). Игра Змейка построена на концепции MVC (model-controll-view). Игра Тетрис написана на языке C, игра Змейка на C++ с помощью библиотеки ncurses.h
 *
 * @section build_sec Сборка
 *
 * Соберем проект по-умолчанию: создадим исполняемый файл с играми, документацию, запустим тесты на проверку логики игры змейки и проверим покрытие функций. В конце объединим файл и документацию в дистрибутив - создадим архив в формате .tgz.
 * ```
 * make
 * ```
 * Данная цель makefile включает в себя 3 цели: clean_all, gcov_report, dist. Далее ниже опишем каждую из них.
 *
 * @section game_install_play_sec Установка и запуск игры
 *
 * @subsection game_install_all_sec Процесс установки
 *
 * Чтобы установить игры консольной и десктопной версии, необходимо прописать в консоли:
 * ```
 * make install
 * ```
 * @subsection game_install_cli_sec Установка консольной версии игр
 *
 * Чтобы установить консольные игры, необходимо прописать в консоли:
 * ```
 * make install_cli
 * ```
 * @subsection game_install_desktop_sec Установка десктопной версии игр
 *
 * Чтобы установить десктопные игры, необходимо прописать в консоли:
 * ```
 * make install_desktop
 * ```
 * @subsection game_play_cli_sec Запуск игр в консоли
 *
 * Для запуска игры в консоли пропишем:
 * ```
 * make play_cli
 * ```
 * @subsection game_play_desktop_sec Запуск игр в десктопе
 *
 * Для запуска десктопной версии игры пропишем:
 * ```
 * make play_desktop
 * ```
 * @section unins_sec Удаление игры
 *
 * Для удаления консольных и десктопных игр необходимо выполнить команду:
 * ```
 * make uninstall
 * ```
 * @section test_sec Тестирование логики Змейки
 *
 * Запустим unit-тесты на проверку логики игры с помощью библиотеки GTest:
 *
 * ```
 * make tests
 * ```
 * ```
 * make start_tests
 * ```
 * @section gcov_sec Проверка покрытия библиотеки тестами
 *
 * Помимо проведения тестов можно сгенерировать html-отчет с помощью lcov для измерения покрытия кода тестами:
 * 
 * ```
 * make gcov_report
 * ```
 * Отчет с покрытием будет находится в файле ./tests/report/index.html
 *
 * @section valgrind_sec Проверка на утечки
 *
 * Чтобы проверить файл с тестами на возможные утечки, пропишем команду:
 * 
 * ```
 * make valgrind
 * ```
 * @section cppcheck_sec Статический анализатор кода
 *
 * Для проверки кода на ошибки, уязвимости, неправильное использование переменных, операторов, которые могут привести к неопределенному поведению и прочим проблемам, выполним команду:
 * 
 * ```
 * make cppcheck
 * ```
 * @section clang_sec Проверка на стилистические нормы
 *
 * Проверим код на соответствие правилам оформления командой:
 * 
 * ```
 * make clang
 * ```
 * @section dox_install_sec Установка Doxygen
 *
 * Doxygen - это инструмент для генерации документации из исходного кода. Для его установки пропишем:
 * ```
 * make install_doxygen
 * ```
 * @section dvi_sec Создание проектной документации проекта
 *
 * Для генерации докуменатации с помощью Doxygen введем: 
 * ```
 * make dvi
 * ```
 * Документация буден сгенерирована в файле ./documentation/html/index.html
 *
 * @section dist_sec Создание дистрибутива проекта
 *
 * Чтобы создать архив-пакет, содержащий все необходимые файлы и инструкции для установки и использования программного продукта на компьютерной системе пропишем в консоли:
 * ```
 * make dist
 * ```
 * @section clean_sec Исходное состояние
 *
 * Чтобы удалить объектные файлы и библиотеки, созданные при сборке, выполним команду:
 * ```
 * make clean
 * ```
 * Чтобы удалить покрытие тестов и файлы, созданные при компиляции тестов, выполним команду:
 * ```
 * make clean_tests
 * ```
 * Чтобы удалить папку сборки с исполняемыми файлами игр, выполним команду:
 * ```
 * make clean_build
 * ```
 * Чтобы удалить документацию, выполним команду:
 * ```
 * make clean_doc
 * ```
 * Чтобы удалить файлы с рекордами выполним команду:
 * ```
 * make clean_high_score
 * ```
 * Чтобы удалить архив с билдами и документацией пропишем:
 * ```
 * make clean_dist
 * ```
 * Для того, чтобы сразу удалить и созданный архив, созданный при выполнении "make dist", с дистрибутивом игры, и файлы с рекордами пропишем:
 * ```
 * make clean_all
 * ```
 * Для того, чтобы вернуться в первоначальное состояние пропишем:
 * ```
 * make rebuild
 * ```
 */